"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7018],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=p(n),d=o,m=g["".concat(l,".").concat(d)]||g[d]||c[d]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6533:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={title:"Integration Tests"},l=void 0,p={unversionedId:"internal/integration-tests",id:"internal/integration-tests",isDocsHomePage:!1,title:"Integration Tests",description:"We use [go-integration-test] to execute integration tests on services.",source:"@site/docs/go-storage/internal/integration-tests.md",sourceDirName:"internal",slug:"/internal/integration-tests",permalink:"/docs/go-storage/internal/integration-tests",editUrl:"https://github.com/beyondstorage/site/edit/master/docs/go-storage/internal/integration-tests.md",tags:[],version:"current",lastUpdatedBy:"zhouyang",lastUpdatedAt:1660215943,formattedLastUpdatedAt:"8/11/2022",frontMatter:{title:"Integration Tests"},sidebar:"docs",previous:{title:"Implement Services",permalink:"/docs/go-storage/internal/implement-services"},next:{title:"Iterator",permalink:"/docs/go-storage/internal/iterator"}},u=[{value:"About go-integration-test",id:"about-go-integration-test",children:[]},{value:"How to add integration tests?",id:"how-to-add-integration-tests",children:[{value:"Setup tests",id:"setup-tests",children:[]},{value:"Add Environment Value support",id:"add-environment-value-support",children:[]}]},{value:"How to run integration tests via GitHub Actions?",id:"how-to-run-integration-tests-via-github-actions",children:[]}],c={toc:u};function g(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We use ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-integration-test"},"go-integration-test")," to execute integration tests on services."),(0,a.kt)("h2",{id:"about-go-integration-test"},"About go-integration-test"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-integration-test"},"go-integration-test")," organized all tests case into:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func TestStorager(t *testing.T, store types.Storager) {\n...\n}\n")),(0,a.kt)("p",null,"For now, go-integration-test implement three test cases:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/go-integration-test/blob/master/storager.go"},"TestStorager")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/go-integration-test/blob/master/multiparter.go"},"TestMultiparter")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/go-integration-test/blob/master/appender.go"},"TestAppender"))),(0,a.kt)("p",null,"All services should add integration tests for operations that they declared in ",(0,a.kt)("inlineCode",{parentName:"p"},"service.toml"),"."),(0,a.kt)("h2",{id:"how-to-add-integration-tests"},"How to add integration tests?"),(0,a.kt)("h3",{id:"setup-tests"},"Setup tests"),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"tests")," directory under the project."),(0,a.kt)("p",null,"Normally, the structure is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"tests\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 storage_test.go\n\u2514\u2500\u2500 utils_test.go\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"README.md")," should add documents about how to run tests."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"storage_test.go")," includes all tests cases from go-integration-test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package tests\n\nimport (\n   "os"\n   "testing"\n\n   tests "go.beyondstorage.io/v5/tests"\n)\n\nfunc TestStorage(t *testing.T) {\n   if os.Getenv("STORAGE_FS_INTEGRATION_TEST") != "on" {\n      t.Skipf("STORAGE_FS_INTEGRATION_TEST is not \'on\', skipped")\n   }\n   tests.TestStorager(t, setupTest(t))\n}\n\nfunc TestAppend(t *testing.T) {\n   if os.Getenv("STORAGE_FS_INTEGRATION_TEST") != "on" {\n      t.Skipf("STORAGE_FS_INTEGRATION_TEST is not \'on\', skipped")\n   }\n   tests.TestAppender(t, setupTest(t))\n}\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"utils_test.go")," should implement ",(0,a.kt)("inlineCode",{parentName:"p"},"setupTest")," which returns ",(0,a.kt)("inlineCode",{parentName:"p"},"types.Storager"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'func setupTest(t *testing.T) types.Storager {\n   t.Log("Setup test for qingstor")\n\n   store, err := s3.NewStorager(\n      ps.WithCredential(os.Getenv("STORAGE_S3_CREDENTIAL")),\n      ps.WithName(os.Getenv("STORAGE_S3_NAME")),\n      ps.WithLocation(os.Getenv("STORAGE_S3_LOCATION")),\n      ps.WithWorkDir("/"+uuid.New().String()+"/"),\n   )\n   if err != nil {\n      t.Errorf("new storager: %v", err)\n   }\n   return store\n}\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"All configuration MUST read from the environment (except ",(0,a.kt)("inlineCode",{parentName:"p"},"workdir")," should be random)"))),(0,a.kt)("h3",{id:"add-environment-value-support"},"Add Environment Value support"),(0,a.kt)("p",null,"Add build target in ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-makefile"},"-include Makefile.env\n\nintegration_test:\n   go test -count=1 -race -covermode=atomic -v ./tests\n")),(0,a.kt)("p",null,"Add ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile.env")," into ",(0,a.kt)("inlineCode",{parentName:"p"},".gitginore")," to prevent credential leaks."),(0,a.kt)("p",null,"Adding all needed environment value into ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile.env.example")," like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"export STORAGE_S3_INTEGRATION_TEST=on\nexport STORAGE_S3_CREDENTIAL=hmac:access_key:secret_key\nexport STORAGE_S3_NAME=bucketname\nexport STORAGE_S3_LOCATION=location\n")),(0,a.kt)("p",null,"Copy ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile.env.example")," into ",(0,a.kt)("inlineCode",{parentName:"p"},"Makefile.env"),", replace all example values with valid values."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"make integration_test")," to execute integration tests."),(0,a.kt)("h2",{id:"how-to-run-integration-tests-via-github-actions"},"How to run integration tests via GitHub Actions?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"GitHub Actions")," is the CI/CD service provided by GitHub. We provide our actions runners to execute all integration tests."),(0,a.kt)("p",null,"To run integration tests every time a new commit has been pushed, please add ",(0,a.kt)("inlineCode",{parentName:"p"},".github/workflows/integration-test.yml")," with the following content:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "Integration Test"\n\non: [push]\n\njobs:\n  integration_test:\n    name: "Integration Test"\n    runs-on: [Linux]\n\n    strategy:\n      matrix:\n        go: [ "1.15", "1.16" ]\n\n    steps:\n      - name: Set up Go 1.x\n        uses: actions/setup-go@v2\n        with:\n          go-version: ${{ matrix.go }}\n\n      - name: Checkout repository\n        uses: actions/checkout@v2\n\n      - name: Test\n        env:\n          STORAGE_S3_INTEGRATION_TEST: ${{ secrets.STORAGE_INTEGRATION_TEST }}\n          STORAGE_S3_CREDENTIAL: ${{ secrets.STORAGE_S3_CREDENTIAL }}\n          STORAGE_S3_NAME: ${{ secrets.STORAGE_S3_NAME }}\n          STORAGE_S3_LOCATION: ${{ secrets.STORAGE_S3_LOCATION }}\n        run: make integration_test\n')),(0,a.kt)("p",null,"Secrets should be set by the project maintainer, please contact them in the public matrix rooms."))}g.isMDXComponent=!0}}]);