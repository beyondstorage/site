"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4198],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,k=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(k,i(i({ref:t},s),{},{components:n})):a.createElement(k,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7435:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Object Lazy Stat"},c=void 0,p={unversionedId:"internal/object-lazy-stat",id:"internal/object-lazy-stat",isDocsHomePage:!1,title:"Object Lazy Stat",description:"Introduction",source:"@site/docs/go-storage/internal/object-lazy-stat.md",sourceDirName:"internal",slug:"/internal/object-lazy-stat",permalink:"/docs/go-storage/internal/object-lazy-stat",editUrl:"https://github.com/beyondstorage/site/edit/master/docs/go-storage/internal/object-lazy-stat.md",tags:[],version:"current",lastUpdatedBy:"JinnyYi",lastUpdatedAt:1623920869,formattedLastUpdatedAt:"6/17/2021",frontMatter:{title:"Object Lazy Stat"},sidebar:"docs",previous:{title:"Migrate Reach to QuerySignHTTPRead",permalink:"/docs/go-storage/internal/migrate-reach-to-querysignhttpread"},next:{title:"Specs",permalink:"/docs/go-storage/internal/specs"}},s=[{value:"Introduction",id:"introduction",children:[]},{value:"Lazy Stat Strategy",id:"lazy-stat-strategy",children:[]},{value:"Instructions",id:"instructions",children:[]}],d={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"We use ",(0,o.kt)("inlineCode",{parentName:"p"},"types.NewObject(client, done)")," to create a new object with client in services. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func NewObject(client Storager, done bool) *Object\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters")),(0,o.kt)("p",null,"client - the client in which ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," is alive."),(0,o.kt)("p",null,"done - marks whether ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," for the object has been performed. ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," indicates ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," has been performed, we don't need to ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," for this object anymore."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Return")),(0,o.kt)("p",null,"An ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," pointer points to the object carries all object metadata."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Object")," carries all the object metadata, including the client in which the object alive, global metadata for object, service defined metadata, user defined metadata. And it supports ",(0,o.kt)("inlineCode",{parentName:"p"},"get/set")," functions. Also, all the metadata could be got by ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," internal."),(0,o.kt)("h2",{id:"lazy-stat-strategy"},"Lazy Stat Strategy"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Lazy Stat")," strategy is to avoid ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," too many times. It's used to fetch data from the remote when required and no matter ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," success or not, it will be executed exactly once."),(0,o.kt)("p",null,"Refer to sync.Once, variable ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," is introduced to mark the execution state of ",(0,o.kt)("inlineCode",{parentName:"p"},"stat"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"sync.Mutex")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"sync.atomic")," are used to ensure read ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," in a thread-safe way."),(0,o.kt)("p",null,"To get a certain object metadata from an ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," instance, ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," belongs to ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," will be called first. ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," calls the function ",(0,o.kt)("inlineCode",{parentName:"p"},"Stat")," belongs to the ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Object")," if the ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," is being called for the first time for this instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Object"),". In other words, given var ",(0,o.kt)("inlineCode",{parentName:"p"},"object Object"),", if ",(0,o.kt)("inlineCode",{parentName:"p"},"object.stat()")," is called multiple times, only the first call will invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"object.client.Stat()"),"."),(0,o.kt)("h2",{id:"instructions"},"Instructions"),(0,o.kt)("p",null,"We should set ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if all the metadata is known or there's no more knowable metadata when calling ",(0,o.kt)("inlineCode",{parentName:"p"},"types.NewObject(s, done)"),". Otherwise, ",(0,o.kt)("inlineCode",{parentName:"p"},"done")," should be set ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", so that ",(0,o.kt)("inlineCode",{parentName:"p"},"stat")," will be called while get a certain object metadata."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For ",(0,o.kt)("inlineCode",{parentName:"li"},"Create"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"To create a normal object without any api call, we should call ",(0,o.kt)("inlineCode",{parentName:"li"},"types.NewObject(client, false)")," to allow the user to fetch data from the remote as only path and object mode are known to us when creating the object."),(0,o.kt)("li",{parentName:"ul"},"To create a multipart object, we should call ",(0,o.kt)("inlineCode",{parentName:"li"},"types.NewObject(client, true)")," as there's no more information for the object except the path, object mode and multipartId."))),(0,o.kt)("li",{parentName:"ul"},"For ",(0,o.kt)("inlineCode",{parentName:"li"},"CreateDir"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"For the native supported services like ",(0,o.kt)("inlineCode",{parentName:"li"},"dropbox"),", only path and object mode are known if ",(0,o.kt)("inlineCode",{parentName:"li"},"mkdir")," success, so we should call ",(0,o.kt)("inlineCode",{parentName:"li"},"types.NewObject(client, false)")," to get the new object."),(0,o.kt)("li",{parentName:"ul"},"For object storage services like ",(0,o.kt)("inlineCode",{parentName:"li"},"s3"),", we could add ",(0,o.kt)("inlineCode",{parentName:"li"},"/")," at the end of the path to simulate directory and get the object metadata from the output of ",(0,o.kt)("inlineCode",{parentName:"li"},"PutObject"),", so we should call ",(0,o.kt)("inlineCode",{parentName:"li"},"types.NewObject(client, true)")," to create the new object.")))))}u.isMDXComponent=!0}}]);