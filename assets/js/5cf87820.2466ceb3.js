"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[5575],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=i,k=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},751:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={title:"Specs"},s=void 0,p={unversionedId:"internal/specs",id:"internal/specs",isDocsHomePage:!1,title:"Specs",description:"[specs] is core of our services:",source:"@site/docs/go-storage/internal/specs.md",sourceDirName:"internal",slug:"/internal/specs",permalink:"/docs/go-storage/internal/specs",editUrl:"https://github.com/beyondstorage/site/edit/master/docs/go-storage/internal/specs.md",tags:[],version:"current",lastUpdatedBy:"JinnyYi",lastUpdatedAt:1630895055,formattedLastUpdatedAt:"9/6/2021",frontMatter:{title:"Specs"},sidebar:"docs",previous:{title:"Object Lazy Stat",permalink:"/docs/go-storage/internal/object-lazy-stat"},next:{title:"rclone",permalink:"/docs/go-storage/comparison/rclone"}},d=[{value:"Operation",id:"operation",children:[]},{value:"Pair",id:"pair",children:[]},{value:"Info",id:"info",children:[]},{value:"Service",id:"service",children:[{value:"<code>name</code>",id:"name",children:[]},{value:"<code>namespace</code>",id:"namespace",children:[]},{value:"<code>pairs</code>",id:"pairs",children:[]},{value:"<code>infos</code>",id:"infos",children:[]}]}],c={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs"},"specs")," is core of our services: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"fields.toml")," defines all fields that we can use in our APIs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"operations.toml")," defines our APIs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pairs.toml")," defines all global pairs that we support."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_object_meta.toml")," defines all object metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"info_storage_meta.toml")," defines all storage metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"service.toml")," defines a service's name, ability and limitations.")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage"},"go-storage")," provides a code generator ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage/tree/master/cmd/definitions"},"definitions")," to generate code using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs"},"specs"),"."),(0,r.kt)("h2",{id:"operation"},"Operation"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage/tree/master/cmd/definitions"},"definitions")," uses ",(0,r.kt)("inlineCode",{parentName:"p"},"fields.toml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"operations.toml")," to generate our public APIs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[storager.op.read]\ndescription = "will read the file\'s data."\nparams      = ["path", "w"]\npairs       = ["size", "offset", "io_callback"]\nresults     = ["n"]\n')),(0,r.kt)("p",null,"will become"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Storager interface {\n    ...\n    \n    // Read will read the file's data.\n    Read(path string, w io.Writer, pairs ...Pair) (n int64, err error)\n    // ReadWithContext will read the file's data.\n    ReadWithContext(ctx context.Context, path string, w io.Writer, pairs ...Pair) (n int64, err error)\n    \n    ...\n    \n    mustEmbedUnimplementedStorager()\n}\n")),(0,r.kt)("p",null,"All supported fields are following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description"),": This operation's description."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"params"),": This operation's params"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"results"),": This operation's returning value"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pairs"),": Required pair for this operation, all service should support."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"local"),": Mark this operation as a local function, ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/go-storage/tree/master/cmd/definitions"},"definitions")," will not add ",(0,r.kt)("inlineCode",{parentName:"li"},"context")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"err")," for this function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object_mode"),": Object mode check for this operation (Introduced in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/specs/blob/master/rfcs/61-add-object-mode-check-for-operations.md"},"GSP-61"),")")),(0,r.kt)("h2",{id:"pair"},"Pair"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Pair")," is the input argument for operations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func Read(path string, w io.Writer, pairs ...Pair) (n int64, err error) {}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage"},"go-storage")," provides ",(0,r.kt)("inlineCode",{parentName:"p"},"pairs.WithXxx")," to support strong typed pair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func WithContentType(v string) Pair {\n    return Pair{\n        Key:   "content_type",\n        Value: v,\n    }\n}\n')),(0,r.kt)("p",null,"We have two kind of pairs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Global Pair"),": defined in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/specs/blob/master/definitions/pairs.toml"},"specs"),", could be used in all services."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"System Pair"),": defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"service.toml"),", could only be used in current service.")),(0,r.kt)("p",null,"All supported fields are following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": corresponding type of this pair"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description"),": description for this pair, supports multiple lines.")),(0,r.kt)("p",null,"Example of adding global pair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[size]\ntype = "int64"\ndescription = "specify size for this request, storage will only read limited content data"\n')),(0,r.kt)("p",null,"Example of adding system pair:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[pairs.force_path_style]\ntype = "bool"\ndescription = "see http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html for Amazon S3: Virtual Hosting of Buckets"\n')),(0,r.kt)("h2",{id:"info"},"Info"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Info")," is the returning information from services:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Storage related info carried in ",(0,r.kt)("inlineCode",{parentName:"li"},"StorageMeta")),(0,r.kt)("li",{parentName:"ul"},"Object related info carried in ",(0,r.kt)("inlineCode",{parentName:"li"},"Object"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage"},"go-storage")," provides ",(0,r.kt)("inlineCode",{parentName:"p"},"GetXxx")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"MustGetXxxx")," to support strong typed info:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (o *Object) GetContentLength() (int64, bool) {}\n\nfunc (o *Object) MustGetContentLength() int64 {}\n")),(0,r.kt)("p",null,"We have two kind of info:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Global Info"),": defined in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/beyondstorage/specs/blob/master/definitions"},"specs"),", could be used in all services."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"System Info"),": defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"service.toml"),", could only be used in current service.")),(0,r.kt)("p",null,"All supported fields are following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),": corresponding type of this pair."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"export"),": whether this info should be exported."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"description"),": description for this pair, supports multiple lines.")),(0,r.kt)("p",null,"Example of adding global info for storage metadata:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[name]\ntype = "string"\nexport = true\n')),(0,r.kt)("p",null,"Example of adding system pair for object metadata:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[infos.object.meta.storage-class]\ntype = "string"\n')),(0,r.kt)("h2",{id:"service"},"Service"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage/tree/master/cmd/definitions"},"definitions")," will use ",(0,r.kt)("inlineCode",{parentName:"p"},"service.toml")," to generate service code. The full example of ",(0,r.kt)("inlineCode",{parentName:"p"},"service.toml")," looks like following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'name = "s3"\n\n[namespace.service.new]\nrequired = ["credential"]\n\n[namespace.service.op.create]\nrequired = ["location"]\n\n[namespace.storage]\nimplement = ["multiparter"]\n\n[namespace.storage.new]\nrequired = ["location", "name"]\n\n[namespace.storage.op.read]\noptional = ["offset", "io_callback", "size"]\n\n[pairs.force_path_style]\ntype = "bool"\ndescription = "see http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html for Amazon S3: Virtual Hosting of Buckets"\n\n[infos.object.meta.storage-class]\ntype = "string"\n')),(0,r.kt)("h3",{id:"name"},(0,r.kt)("inlineCode",{parentName:"h3"},"name")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'name = "s3"\n')),(0,r.kt)("p",null,"The name of current service, should be unique."),(0,r.kt)("h3",{id:"namespace"},(0,r.kt)("inlineCode",{parentName:"h3"},"namespace")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage"},"go-storage")," has two namespace: ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"storage"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"namespace")," COULD implement extra interfaces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[namespace.storage]\nimplement = ["multiparter"]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We should also add related ",(0,r.kt)("inlineCode",{parentName:"li"},"UnimplementedMultiparter")," stub into our ",(0,r.kt)("inlineCode",{parentName:"li"},"Storage")," struct.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"namespace")," MUST add ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," section to describe how to initiate this namespace:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[namespace.service.new]\nrequired = ["credential"]\noptional = ["endpoint"]\n')),(0,r.kt)("p",null,"This section contains two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"required"),": Required pairs for initialization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional"),": Optional pairs for initialization (could have default value)")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"namespace")," MAY declare pairs for specific operations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[namespace.storage.op.read]\noptional = ["offset", "io_callback", "size"]\n')),(0,r.kt)("p",null,"This section contains two fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"required"),": Required pairs for initialization"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"optional"),": Optional pairs for initialization (could have default value)")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Operations could have required pairs, all service should support."),(0,r.kt)("p",{parentName:"div"},"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"Read")," operation has ",(0,r.kt)("inlineCode",{parentName:"p"},'["size", "offset", "io_callback"]'),", all service should support those pairs, or their need to add convert functions:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (s *Storage) convertWriteStorageClass(v string) (string, bool) {\n    return "", true\n}\n')))),(0,r.kt)("h3",{id:"pairs"},(0,r.kt)("inlineCode",{parentName:"h3"},"pairs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[pairs.force_path_style]\ntype = "bool"\ndescription = "see http://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html for Amazon S3: Virtual Hosting of Buckets"\n')),(0,r.kt)("p",null,"System pairs, name should be ",(0,r.kt)("inlineCode",{parentName:"p"},"snack_case")),(0,r.kt)("h3",{id:"infos"},(0,r.kt)("inlineCode",{parentName:"h3"},"infos")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-toml"},'[infos.object.meta.storage-class]\ntype = "string"\n')),(0,r.kt)("p",null,"System infos, name should be ",(0,r.kt)("inlineCode",{parentName:"p"},"kebab-case")))}m.isMDXComponent=!0}}]);