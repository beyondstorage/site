"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[2588],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9535:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"2021-24 Weekly Report",author:"Xuanwo",author_url:"https://github.com/Xuanwo",tags:["updates","weekly-report"]},p=void 0,l={permalink:"/blog/2021/06/21/weekly-report",editUrl:"https://github.com/beyondstorage/site/edit/master/blog/2021-06-21-weekly-report.md",source:"@site/blog/2021-06-21-weekly-report.md",title:"2021-24 Weekly Report",description:"Hello every one, here is the weekly report for BeyondStorage, which ranges from 2021-06-15 to 2021-06-18.",date:"2021-06-21T00:00:00.000Z",formattedDate:"June 21, 2021",tags:[{label:"updates",permalink:"/blog/tags/updates"},{label:"weekly-report",permalink:"/blog/tags/weekly-report"}],readingTime:1.905,truncated:!0,authors:[{name:"Xuanwo",url:"https://github.com/Xuanwo"}],prevItem:{title:"2021-26 Weekly Report",permalink:"/blog/2021/07/02/weekly-report"},nextItem:{title:"2021-23 Weekly Report",permalink:"/blog/2021/06/11/weekly-report"}},u={authorsImageUrls:[void 0]},c=[{value:"New Proposals",id:"new-proposals",children:[{value:"Re-support Initialization Via Connection String",id:"re-support-initialization-via-connection-string",children:[]},{value:"Add Restrictions In Storage Metadata",id:"add-restrictions-in-storage-metadata",children:[]},{value:"Add System Metadata In Storage Metadata",id:"add-system-metadata-in-storage-metadata",children:[]}]},{value:"New Ideas",id:"new-ideas",children:[{value:"Feature gates are confusing",id:"feature-gates-are-confusing",children:[]},{value:"Add support for PostObject",id:"add-support-for-postobject",children:[]},{value:"Update RFC format",id:"update-rfc-format",children:[]}]},{value:"New Articles",id:"new-articles",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Hello every one, here is the weekly report for ",(0,o.kt)("a",{parentName:"p",href:"https://beyondstorage.io"},"BeyondStorage"),", which ranges from 2021-06-15 to 2021-06-18."),(0,o.kt)("h2",{id:"new-proposals"},"New Proposals"),(0,o.kt)("p",null,"This week, we have the following proposal updates."),(0,o.kt)("h3",{id:"re-support-initialization-via-connection-string"},"Re-support Initialization Via Connection String"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/pull/90"},"GSP-90")," intends to add support for connection strings which allow user to ",(0,o.kt)("inlineCode",{parentName:"p"},"NewStorager")," like:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"s3://bucket_name/prefix?credential=hmac:xxxx:xxxx&endpoint=http://s3.us-east-2.amazonaws.com")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fs:///tmp"))),(0,o.kt)("p",null,"This week we made huge progress and finally approved this GSP. The implementations could be tracked at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage/issues/600"},"Tracking issue for GSP-90: Re-support Initialization Via Connection String"),"."),(0,o.kt)("h3",{id:"add-restrictions-in-storage-metadata"},"Add Restrictions In Storage Metadata"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/pull/97"},"GSP-97")," intends to add restrictions in storage metadata. In this GSP, ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/JinnyYi"},"@JinnyYi")," proposes to refactor ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageMeta")," like we do on ",(0,o.kt)("inlineCode",{parentName:"p"},"Object"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type StorageMeta struct {\n   location               string\n   Name                   string\n   WorkDir                string\n   copySizeMaximum        int64\n   fetchSizeMaximum       int64\n   moveSizeMaximum        int64\n   writeSizeMaximum       int64\n   appendNumberMaximum    int64\n   appendSizeMaximum      int64\n   appendTotalSizeMaximum int64\n   multipartNumberMaximum int64\n   multipartSizeMaximum   int64\n   multipartSizeMinimum   int64\n   \n   // bit used as a bitmap for object value, 0 means not set, 1 means set \n   bit uint64\n   m   map[string]interface{}\n}\n")),(0,o.kt)("p",null,"So users can get the storage's restrictions before really call the API."),(0,o.kt)("p",null,"This week we approved and merged this GSP. The implementations could be tracked at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/go-storage/issues/599"},"Tracking issue for GSP-97: Add Restrictions In Storage Metadata"),"."),(0,o.kt)("h3",{id:"add-system-metadata-in-storage-metadata"},"Add System Metadata In Storage Metadata"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/pull/111"},"GSP-111")," is still under discussion."),(0,o.kt)("p",null,"We are facing the problem of naming, as discussed in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/pull/111#pullrequestreview-687066390"},"this review"),". We start a new issue ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/issues/114"},"Idea: Find a new word to represent Service")," to resolve this problem."),(0,o.kt)("h2",{id:"new-ideas"},"New Ideas"),(0,o.kt)("p",null,"This week we camp up following new ideas."),(0,o.kt)("h3",{id:"feature-gates-are-confusing"},"Feature gates are confusing"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/pull/87"},"GSP-87")," introduces a new concept about ",(0,o.kt)("inlineCode",{parentName:"p"},"Features"),", but this concept is not clear enough which makes it hard to implement."),(0,o.kt)("p",null,"We tried to resolve this problem in issue ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/issues/107"},"Feature gates are confusing"),"."),(0,o.kt)("h3",{id:"add-support-for-postobject"},"Add support for PostObject"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/issues/108"},"Add support for PostObject")," is used for tracking new ideas about ",(0,o.kt)("inlineCode",{parentName:"p"},"PostObject")," support."),(0,o.kt)("h3",{id:"update-rfc-format"},"Update RFC format"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/xxchan"},"@xxchan")," found current RFC's format is hard to maintain, so he came up a new idea to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/beyondstorage/specs/issues/110"},"update rfc format"),". We will get this into the proposal process sooner or later."),(0,o.kt)("h2",{id:"new-articles"},"New Articles"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/xxchan"},"@xxchan")," start a new post ",(0,o.kt)("a",{parentName:"p",href:"https://forum.beyondstorage.io/t/go-storage-source-code-reading-code-generation/109"},"Go-storage Source Code Reading: Code Generation")," to discuss the code generation logic in go-storage."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/JinnyYi"},"@JinnyYi")," added new internal post ",(0,o.kt)("a",{parentName:"p",href:"https://beyondstorage.io/docs/go-storage/internal/object-lazy-stat"},"Object Lazy Stat")," in which talk about our object lazy stat logic."),(0,o.kt)("hr",null))}m.isMDXComponent=!0}}]);