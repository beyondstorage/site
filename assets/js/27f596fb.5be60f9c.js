"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[7787],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(y,l(l({ref:t},s),{},{components:r})):n.createElement(y,l({ref:t},s))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4302:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return s}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),l=["components"],i={},p="cp",c={unversionedId:"commands/cp",id:"commands/cp",isDocsHomePage:!1,title:"cp",description:"BeyondCTL support copy dirs and files between storage services.",source:"@site/docs/beyond-ctl/commands/cp.md",sourceDirName:"commands",slug:"/commands/cp",permalink:"/docs/beyond-ctl/commands/cp",editUrl:"https://github.com/beyondstorage/site/edit/master/docs/beyond-ctl/commands/cp.md",tags:[],version:"current",lastUpdatedBy:"abyss-w",lastUpdatedAt:1634284090,formattedLastUpdatedAt:"10/15/2021",frontMatter:{},sidebar:"docs",previous:{title:"cat",permalink:"/docs/beyond-ctl/commands/cat"},next:{title:"ls",permalink:"/docs/beyond-ctl/commands/ls"}},s=[{value:"Copy directory",id:"copy-directory",children:[]},{value:"Speed up via Multipart",id:"speed-up-via-multipart",children:[]},{value:"Speed limit",id:"speed-limit",children:[]},{value:"Control concurrency via Workers",id:"control-concurrency-via-workers",children:[]}],d={toc:s};function u(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cp"},"cp"),(0,a.kt)("p",null,"BeyondCTL support copy dirs and files between storage services."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"NAME:\n   byctl cp - copy file from source storager to target storager\n\nUSAGE:\n   byctl cp [command options] [source] [target]\n\nOPTIONS:\n   --multipart-threshold value  Specify multipart threshold. If source file size is larger than this value, beyondctl will use multipart method to copy file. (default: 1GB) [$BEYOND_CTL_MULTIPART_THRESHOLD]\n   --workers value              Specify the workers number (default: 4) [$BEYOND_CTL_WORKERS]\n   --read-speed-limit value     Specify speed limit for read I/O operations, for example, 1MB, 10mb, 3GiB. [$BEYOND_CTL_READ_SPEED_LIMIT]\n   --write-speed-limit value    Specify speed limit for write I/O operations, for example, 1MB, 10mb, 3GiB. [$BEYOND_CTL_WRITE_SPEED_LIMIT]\n   --recursive, -r, -R          copy directories recursively (default: false)\n   --help, -h                   show help (default: false)\n")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cp test.mp4 example:/test.mp4\n")),(0,a.kt)("h2",{id:"copy-directory"},"Copy directory"),(0,a.kt)("p",null,"BeyondCTL supports copy directory."),(0,a.kt)("p",null,"By default, BeyondCTL does not switch to the copy directory, we can specify the copy directory with ",(0,a.kt)("inlineCode",{parentName:"p"}," --recursive"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"-r")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"-R"),"."),(0,a.kt)("p",null,"For example, we copy the local directory ",(0,a.kt)("inlineCode",{parentName:"p"},"testDir")," to the service specified by profile example."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cp -r testDir example:/testDir\n")),(0,a.kt)("h2",{id:"speed-up-via-multipart"},"Speed up via Multipart"),(0,a.kt)("p",null,"BeyondCTL supports speed up the copy procedure via ",(0,a.kt)("a",{parentName:"p",href:"/docs/go-storage/operations/multiparter/index"},"Multipart"),"."),(0,a.kt)("p",null,"By default, BeyondCTL will switch to ",(0,a.kt)("inlineCode",{parentName:"p"},"multipart")," method while the source file is larger than 1 GiB. We can specify the threshold by ",(0,a.kt)("inlineCode",{parentName:"p"},"--multipart-threshold"),":"),(0,a.kt)("p",null,"For example, we can reduce the threshold to ",(0,a.kt)("inlineCode",{parentName:"p"},"100MiB")," to enforce beyondctl use multipart method once file is larger than ",(0,a.kt)("inlineCode",{parentName:"p"},"100MiB"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cp --multipart-threshold=100MiB test.mp4 example:/test.mp4\n")),(0,a.kt)("h2",{id:"speed-limit"},"Speed limit"),(0,a.kt)("p",null,"Sometimes, we don't want beyondctl use too many resources. We can limit the read or write speed via ",(0,a.kt)("inlineCode",{parentName:"p"},"--read-speed-limit")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"--write-speed-limit"),"."),(0,a.kt)("p",null,"For example, we can limit the global read speed to 1 MiB."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cp --read-speed-limit=1MiB test.mp4 example:/test.mp4\n")),(0,a.kt)("h2",{id:"control-concurrency-via-workers"},"Control concurrency via Workers"),(0,a.kt)("p",null,"BeyondCTL support concurrency copy be default. We can control the concurrent workers by ",(0,a.kt)("inlineCode",{parentName:"p"},"--workers"),"."),(0,a.kt)("p",null,"By default, we will have ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," workers."),(0,a.kt)("p",null,"We can increase the workers number to ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," via:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cp --workers=10 test.mp4 example:/test.mp4\n")))}u.isMDXComponent=!0}}]);