"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[787],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,c(c({ref:t},s),{},{components:n})):r.createElement(f,c({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var p=2;p<a;p++)c[p]=n[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8646:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),c=["components"],i={},l="cat",p={unversionedId:"commands/cat",id:"commands/cat",isDocsHomePage:!1,title:"cat",description:"BeyondCTL support pipe data from storage services into stdout.",source:"@site/docs/beyond-ctl/commands/cat.md",sourceDirName:"commands",slug:"/commands/cat",permalink:"/docs/beyond-ctl/commands/cat",editUrl:"https://github.com/beyondstorage/site/edit/master/docs/beyond-ctl/commands/cat.md",tags:[],version:"current",lastUpdatedBy:"zhouyang",lastUpdatedAt:1660215943,formattedLastUpdatedAt:"8/11/2022",frontMatter:{},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/beyond-ctl/index"},next:{title:"cp",permalink:"/docs/beyond-ctl/commands/cp"}},s=[{value:"Use with BeyondCTL&#39;s tee",id:"use-with-beyondctls-tee",children:[]},{value:"Control concurrency via Workers",id:"control-concurrency-via-workers",children:[]}],u={toc:s};function d(e){var t=e.components,n=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cat"},"cat"),(0,a.kt)("p",null,"BeyondCTL support pipe data from storage services into stdout."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'NAME:\n   byctl cat - pipe data from storage services into stdout\n\nUSAGE:\n   byctl cat [command options] [source]\n\nOPTIONS:\n   --config FILE, -c FILE  Load config from FILE (default: "/root/.config/byctl/config.toml") [$BEYOND_CTL_CONFIG]\n   --workers value         Specify the workers number (default: 4) [$BEYOND_CTL_WORKERS]\n   --help, -h              show help (default: false)\n')),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"byctl cat example:testCat\n")),(0,a.kt)("h2",{id:"use-with-beyondctls-tee"},"Use with BeyondCTL's tee"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"cat")," command can also be used with the ",(0,a.kt)("inlineCode",{parentName:"p"},"tee")," command, for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"byctl cat example:testCat | byctl tee another:testCat\n")),(0,a.kt)("p",null,"Executing the above command will upload the contents of the file ",(0,a.kt)("inlineCode",{parentName:"p"},"testCat")," in service ",(0,a.kt)("inlineCode",{parentName:"p"},"example")," to the file ",(0,a.kt)("inlineCode",{parentName:"p"},"testCat")," in service ",(0,a.kt)("inlineCode",{parentName:"p"},"another"),"."),(0,a.kt)("h2",{id:"control-concurrency-via-workers"},"Control concurrency via Workers"),(0,a.kt)("p",null,"BeyondCTL support concurrency cat be default. We can control the concurrent workers by ",(0,a.kt)("inlineCode",{parentName:"p"},"--workers"),"."),(0,a.kt)("p",null,"By default, we will have ",(0,a.kt)("inlineCode",{parentName:"p"},"4")," workers."),(0,a.kt)("p",null,"We can increase the workers number to ",(0,a.kt)("inlineCode",{parentName:"p"},"10")," via:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"byctl cat --workers=10 example:testCat\n")))}d.isMDXComponent=!0}}]);